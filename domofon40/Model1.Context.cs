//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace domofon40
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class domofon14Entities : DbContext
    {
        public domofon14Entities()
            : base("name=domofon14Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<del_оплаты> del_оплаты { get; set; }
        public virtual DbSet<del_оплачено> del_оплачено { get; set; }
        public virtual DbSet<виды_услуг> виды_услуг { get; set; }
        public virtual DbSet<годы> годы { get; set; }
        public virtual DbSet<клиенты> клиенты { get; set; }
        public virtual DbSet<месяцы> месяцы { get; set; }
        public virtual DbSet<оплаты> оплаты { get; set; }
        public virtual DbSet<отключения> отключения { get; set; }
        public virtual DbSet<повторы> повторы { get; set; }
        public virtual DbSet<подключения> подключения { get; set; }
        public virtual DbSet<поселки> поселки { get; set; }
        public virtual DbSet<примечания> примечания { get; set; }
        public virtual DbSet<раб_дней> раб_дней { get; set; }
        public virtual DbSet<работы> работы { get; set; }
        public virtual DbSet<услуги> услуги { get; set; }
        public virtual DbSet<филиалы> филиалы { get; set; }
        public virtual DbSet<фирмы> фирмы { get; set; }
        public virtual DbSet<цены> цены { get; set; }
        public virtual DbSet<шаблоны> шаблоны { get; set; }
        public virtual DbSet<опл_работы> опл_работы { get; set; }
        public virtual DbSet<звонки> звонки { get; set; }
        public virtual DbSet<простои> простои { get; set; }
        public virtual DbSet<возврат> возврат { get; set; }
        public virtual DbSet<сотрудники> сотрудники { get; set; }
        public virtual DbSet<улицы> улицы { get; set; }
        public virtual DbSet<дома> дома { get; set; }
        public virtual DbSet<льготы> льготы { get; set; }
        public virtual DbSet<начало> начало { get; set; }
        public virtual DbSet<виды_оплат> виды_оплат { get; set; }
        public virtual DbSet<воз_работы> воз_работы { get; set; }
        public virtual DbSet<оплачено> оплачено { get; set; }
    
        public virtual ObjectResult<ввод_тарифов_Result> ввод_тарифов(Nullable<System.Guid> услуга)
        {
            var услугаParameter = услуга.HasValue ?
                new ObjectParameter("услуга", услуга) :
                new ObjectParameter("услуга", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ввод_тарифов_Result>("ввод_тарифов", услугаParameter);
        }
    
        public virtual int должники1дома(Nullable<System.Guid> дом)
        {
            var домParameter = дом.HasValue ?
                new ObjectParameter("дом", дом) :
                new ObjectParameter("дом", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("должники1дома", домParameter);
        }
    
        public virtual int звонки_на_сотовый()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("звонки_на_сотовый");
        }
    
        public virtual ObjectResult<список_разрешений_Result> список_разрешений()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<список_разрешений_Result>("список_разрешений");
        }
    }
}
